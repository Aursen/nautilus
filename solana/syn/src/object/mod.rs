//! Builds the required trait implementations for an annotated struct.
pub mod data;
pub mod default_instructions;
pub mod parser;
pub mod seeds;
pub mod source;

use proc_macro2::{TokenStream, };
use quote::{quote, ToTokens};
use syn::{Ident, ItemStruct, ItemEnum};

use crate::entry::required_account::RequiredAccount;

use self::{
    parser::{parse_item_struct, NautilusObjectConfig}, 
    data::{impl_borsh, impl_default, impl_clone, impl_nautilus_record_data, impl_nautilus_account_data},
};

/// The struct containing the parsed contents of a user's struct, annotated with either `#[derive(nautilus::Table)]`
/// or `#[derive(nautilus::Directory)]`.
/// 
/// * `ident`: The struct's identifier.
/// * `raw_Type`: The raw type of the object (is it a struct or enum?).
/// * `entry_config`: Account-specific configurations required for building the program's entrypoint, such as `is_signer`.
/// * `object_config`: The object's configurations. these will be specific to whether or not it's a `Record` or an `Account`.
#[derive(Clone, Debug)]
pub struct NautilusObject {
    pub ident: Ident,
    pub raw_type: NautilusObjectRawType,
    pub entry_config: Option<ObjectEntryConfig>,
    pub object_config: Option<NautilusObjectConfig>,
}

/// The type of Nautilus object.
#[derive(Clone, Debug)]
pub enum NautilusObjectType {
    Record,
    Account,
}

/// Represent a "raw type" of an object (struct or enum?).
#[derive(Clone, Debug)]
pub enum NautilusObjectRawType {
    Struct(ItemStruct),
    Enum(ItemEnum),
}

/// Entrypoint configurations for underlying accounts.
#[derive(Clone, Debug)]
pub struct ObjectEntryConfig {
    pub arg_ident: Ident,
    pub is_create: bool,
    pub is_signer: bool,
    pub is_mut: bool,
}

impl NautilusObject {
    /// Converts the user's annotated struct into the `NautilusObject` struct.
    ///
    /// All of the work to implement all required traits for the account's inner data is done here.
    /// It's handled mostly by the `parse_item_struct(..)` function.
    /// 
    /// Note: because the `NautilusObject` struct is used for derivations on many different kinds of 
    /// Nautilus objects, the default for converting directly from a `syn::ItemStruct` into a `NautilusObject`
    /// is to set the value for `entry_config` to `None`. This is because we don't require these configurations when
    /// comprising a list of types - both for the IDL and to compare from later. This is done in the entrypoint
    /// `#[nautilus]` macro.
    pub fn from_item_struct(value: ItemStruct, nautilus_ty: NautilusObjectType) -> Self {
        let ident = value.ident.clone();
        let object_config = parse_item_struct(&value, nautilus_ty);
        Self {
            ident,
            raw_type: NautilusObjectRawType::Struct(value.clone()),
            entry_config: None,
            object_config,
        }
    }

    /// Resolve the required accounts for this object type based on its configurations and object type (`Record`, `Account`, `Mint`, etc.).
    pub fn get_required_accounts(&self) -> (Vec<RequiredAccount>, Option<Vec<RequiredAccount>>) {
        match &self.entry_config {
            Some(config) => RequiredAccount::resolve_accounts(
                config.arg_ident.to_string(), 
                RequiredAccount::derive_object_type(
                    &self.ident.to_string(), 
                    config.is_mut, 
                    self.object_config.as_ref().map(|config| match config {
                        NautilusObjectConfig::RecordConfig { .. } => NautilusObjectType::Record,
                        NautilusObjectConfig::AccountConfig { .. } => NautilusObjectType::Account,
                    })
                ), 
                config.is_create,
                config.is_signer,
                config.is_mut,
            ),
            None => panic!("Error: `get_required_accounts` was invoked before setting the value for `entry_config`!"),
        }
    }
}

impl ToTokens for NautilusObject {
    /// Extends the existing compiler tokens by the tokens generated by the `NautilusObject`.
    fn to_tokens(&self, tokens: &mut TokenStream) {
        tokens.extend::<TokenStream>(self.into());
    }
}

impl From<&NautilusObject> for TokenStream {
    /// Spawns a myriad of new tokens from the `NautilusObject` for the compiler.
    /// This is where the various configurations are used to generate tokens for implementing
    /// traits.
    fn from(ast: &NautilusObject) -> Self {
        let ident = &ast.ident;
        let object_config = match &ast.object_config {
            Some(object_config) => object_config,
            None => panic!(
                "No object_config was derived for this Nautilus object: {}",
                ident.to_string()
            ),
        };
        match object_config {
            NautilusObjectConfig::RecordConfig {
                table_name,
                data_fields,
                autoincrement_enabled,
                primary_key_ident,
                primary_key_ty,
                authorities: _, // TODO: Add authority function creation
                default_instructions: _, // TODO: Add default instructions to 
            } => {
                let fields = &data_fields;
                let impl_clone = impl_clone(ident, fields);
                let impl_default = impl_default(ident, fields);
                let impl_borsh = impl_borsh(ident, fields);
                let impl_nautilus_record_data = impl_nautilus_record_data(
                    ident, 
                    fields,
                    &table_name,
                    *autoincrement_enabled,
                    &primary_key_ident, 
                    &primary_key_ty,
                );
                quote! {
                    #impl_clone
                    #impl_default
                    #impl_borsh
                    #impl_nautilus_record_data
                }
                .into()
            },
            NautilusObjectConfig::AccountConfig {
                discrminator_str,
                data_fields,
                authorities: _, // TODO: Add authority function creation
                seeds,
            } => {
                let fields = &data_fields;
                let impl_clone = impl_clone(ident, fields);
                let impl_default = impl_default(ident, fields);
                let impl_borsh = impl_borsh(ident, fields);
                let impl_nautilus_account_data = impl_nautilus_account_data(
                    ident, 
                    fields,
                    &discrminator_str,
                    seeds,
                );
                quote! {
                    #impl_clone
                    #impl_default
                    #impl_borsh
                    #impl_nautilus_account_data
                }
                .into()
            },
        }
    }
}
